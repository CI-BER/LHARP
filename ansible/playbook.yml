---
- hosts: irp2
  become: yes

  vars:
    project_path: ~/IRP2
    virtualenv_path: ~/irp2venv

  roles:
    - ansible-java8-oracle

  tasks:
    - name: Add source repository
      apt_repository: repo="deb-src http://us.archive.ubuntu.com/ubuntu/ xenial main restricted" state=present
    - name: Install packages
      apt: pkg={{ item }} state=latest
      with_items:
        - python3
        - python3-dev
        - python-dev
        - python-virtualenv
        - python-pip
        - libz-dev
        - git
        - nginx

    - name: Install Python3 LXML dependencies
      apt: pkg=python3-lxml state=build-dep update_cache=yes

    - name: Configure Nginx Proxy
      template: src=nginx-irp2.conf.j2 dest=/etc/nginx/conf.d/irp2.conf
    - service: name=nginx state=restarted enabled=yes

    - name: Create Solr user
      user: name=solr system=yes

    - stat: path=/opt/solr
      register: s

    - name: Download Solr
      get_url: url=http://mirrors.ibiblio.org/apache/lucene/solr/6.1.0/solr-6.1.0.tgz dest=/tmp/solr-6.1.0.tgz
      when: s.stat.exists is defined and s.stat.exists == False

    - name: Extract Solr installer
      command: tar xzf /tmp/solr-6.1.0.tgz solr-6.1.0/bin/install_solr_service.sh --strip-components=2
      args:
        chdir: /tmp/
        creates: /opt/solr

    - name: Run Solr installer (starts Solr service)
      command: bash ./install_solr_service.sh solr-6.1.0.tgz -i /opt -d /var/solr -u solr -s solr -p 8983
      args:
        chdir: /tmp/
        creates: /opt/solr

    - name: Deploy Solr SystemD Service
      copy: src=solr.service dest=/etc/systemd/system/solr.service

    - name: Enable Solr service
      service: name=solr enabled=yes state=restarted

    - name: Create terms Solr core
      command: sudo -u solr /opt/solr/bin/solr create -c {{ item }}
      ignore_errors: yes
      tags: terms
      with_items:
        - artist
        - location

    - uri:
        url: http://localhost:8983/solr/artist/schema
        method: POST
        body: "{ 'add-field': { 'name': '{{item}}', 'type': 'string', 'stored': true }}"
        status_code: 200
        body_format: json
      with_items:
        - label
        - name
      tags: terms

    - uri:
        url: http://localhost:8983/solr/location/schema
        method: POST
        body: "{ 'add-field': { 'name': '{{item}}', 'type': 'string', 'stored': true }}"
        status_code: 200
        body_format: json
      with_items:
        - label
        - name
      tags: terms

    - name: Unpack terminology archives to server
      unarchive: src={{ item }}.json.tar.gz dest=/tmp
      with_items:
        - artist
        - location
      tags: terms

    - fetch: src=/tmp/{{ item }}.json dest=/tmp/fetched
      with_items:
        - artist
        - location

    - uri:
        url: "http://localhost:8983/solr/{{ item }}/update/json/docs?commit=true&f=label:/label/value&f=id:/label/value&f=name:/name/value"
        method: POST
        timeout: 300
        HEADER_Content-type: application/json; charset=utf-8
        body: "{{ lookup('file', '/tmp/fetched/machine/tmp/' + item + '.json') }}"
        status_code: 200
        body_format: json
      with_items:
        - artist
        - location
      tags: terms

    - file: path={{ project_path }} state=directory mode=0755
      become: no
      tags: code

    - name: Deploy application code
      copy: src=../../{{ item }} dest={{ project_path }} mode=0755
      with_items:
        - archives
        - static
        - templates
        - dashboard.py
        - flask_extended.py
        - requirements.txt
      become: no
      when: vagrant is not defined
      tags: code

    - name: Deploy instance (no overwrite)
      copy: src=../../instance dest={{ project_path }} mode=0755 force=no
      become: no
      when: vagrant is not defined
      tags: code

    - name: Install Python packages
      pip: requirements={{ project_path }}/requirements.txt virtualenv={{ virtualenv_path }} virtualenv_python=python3.4
      become: no

    - name: Create the virtualenv postactivate script to set environment variables
      become: no
      lineinfile: dest={{ virtualenv_path }}/bin/activate insertafter=EOF line="export FLASK_APP={{ project_path }}/dashboard.py"

    - template: src=venv_exec.j2 dest={{ virtualenv_path }}/bin/exec mode=755
      become: no

    - name: Initialize DB
      become: no
      command: "{{ virtualenv_path }}/bin/exec flask init_db"

    - name: Ensure that the application file permissions are set properly
      file: path={{ virtualenv_path }}
            recurse=yes
            owner={{ gunicorn_user }}
            group={{ gunicorn_group }}
            state=directory
      notify: restart application
      tags: deploy

    - include: setup_nginx.yml
      tags: nginx

  handlers:
    - name: restart Nginx
      service: name=nginx state=restarted
